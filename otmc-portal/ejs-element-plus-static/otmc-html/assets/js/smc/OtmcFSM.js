/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : otmc.state.machine.sm
 */


//
// Copyright (c) 2023 watorvapor, Inc.
// All rights reserved.
//
// otmc state machine
//
// Author: Wator vapor
//



function OtmcSMState () {}
OtmcSMState.prototype = new State();

var _empty = function () {};
OtmcSMState.prototype.Entry = _empty;
OtmcSMState.prototype.Exit = _empty;

var _default = function (fsm) {
    this.Default(fsm);
};
OtmcSMState.prototype.OnKeyAddress = _default;
OtmcSMState.prototype.Timeout = _default;

OtmcSMState.prototype.Default = function (fsm) {
    var msg = "Undefined Transition\nState: "
            + fsm.getState().name
            + "\nTransition: "
            + fsm.transition
            + "\n";
    throw new Error(msg);
};


function OtmcMap_DefaultState (name, id) {
    State.call(this, name, id);
}
OtmcMap_DefaultState.prototype = new OtmcSMState();

var OtmcMap = {};
OtmcMap.DefaultState = new OtmcMap_DefaultState('OtmcMap::DefaultState', 0);

function OtmcMap_Empty (name, id) {
    State.call(this, name, id);
}
OtmcMap_Empty.prototype = OtmcMap.DefaultState;

OtmcMap.Empty = new OtmcMap_Empty('OtmcMap::Empty', 1);

OtmcMap.Empty.OnKeyAddress = function (fsm) {
    var ctxt = fsm.owner;
    fsm.getState().Exit(fsm);
    fsm.clearState();
    try {
        ctxt.ReadLocalStorage();
    }
    finally {
        fsm.setState(OtmcMap.EdKeysReady);
        fsm.getState().Entry(fsm);
    }

};

OtmcMap.Empty.Timeout = function (fsm) {
    var ctxt = fsm.owner;
    fsm.getState().Exit(fsm);
    fsm.clearState();
    try {
        ctxt.ReadLocalStorage();
    }
    finally {
        fsm.setState(OtmcMap.Empty);
        fsm.getState().Entry(fsm);
    }

};

function OtmcMap_EdKeysReady (name, id) {
    State.call(this, name, id);
}
OtmcMap_EdKeysReady.prototype = OtmcMap.DefaultState;

OtmcMap.EdKeysReady = new OtmcMap_EdKeysReady('OtmcMap::EdKeysReady', 2);

function OtmcFSM (owner) {
    FSMContext.call(this, OtmcMap.Empty);
    this.owner = owner;
}
OtmcFSM.prototype = new FSMContext();
try {
    global.OtmcFSM = OtmcFSM;
} catch (ex) {}

OtmcFSM.prototype.enterStartState = function () {
    this.getState().Entry(this);
};

OtmcFSM.prototype.OnKeyAddress = function () {
    this.transition = 'OnKeyAddress';
    this.getState().OnKeyAddress(this);
    this.transition = '';
};

OtmcFSM.prototype.Timeout = function () {
    this.transition = 'Timeout';
    this.getState().Timeout(this);
    this.transition = '';
};


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
